const styleSheet = require('./supportCSSStyleSheet')
module.exports = body

function body ({content, ui, theme}) {
    // insert CSS style
    const customStyle = theme ? theme.style : ''
    // set CSS variables
    if (theme && theme.props) {
        var {
            size, color, bgColor, 
            borderWidth, borderStyle, borderColor, 
            labelSize, labelColor, labelFocusColor, 
            inputColor, inputFocusColor, inputBgColor, 
            inputBorderWidth, inputBorderStyle, inputBorderColor, inputPadding, 
            shadowBlur, shadowColor, limitSize, limitColor, 
            avatarSize
        } = theme.props
    }
    // UI view
    function layout (style) {
        const e = document.createElement('i-body')
        const root = e.attachShadow({mode: 'closed'})
        e.dataset.ui = ui
        styleSheet(root, style)
        root.append(content)
        return e
    }

    const style = `
    :host(i-body) {
        --modal-body-size: ${size ? size : 'var(--size14)'};
        --modal-body-color: ${color ? color : 'var(--color-grey88)'};
        --modal-body-bgColor: ${bgColor ? bgColor : 'var(--color-white)'};
        --opacity: 0;
        display: grid;
        grid-template-rows: auto;
        grid-template-columns: 1fr;
        background-color: hsla( var(--modal-body-bgColor), var(--opacity) );
        align-items: center;
        color: hsl( var(--modal-body-color) );
        font-size: var(--modal-body-size);
    }
    :host(i-body) button {
        cursor: pointer;
        display: grid;
        justify-content: center;
        align-items: center;
        padding: 4px 10px;
    }
    :host(i-body) button > .icon {
        width: 24px;
        height: 24px;
    }
    :host(i-body) img, svg {
        width: 100%;
        height: auto;
    }
    :host(i-body) .form-field {
        display: grid;
        gap: 20px;
    }
    :host(i-body) .row {
        --color: ${color ? color : 'var(--primary-color)'};
        --size: ${size ? size : 'var(--size14)'};
        display: grid;
        color: hsl( var(--color) );
        font-size: var(--size);
        word-break: break-all;
    }
    :host(i-body) .row:focus-within label {
        --label-focus: ${labelFocusColor ? labelFocusColor : 'var(--color-black)'};
        color: hsl( var(--label-focus) );
    }
    :host(i-body) label {
        --label-color: ${labelColor ? labelColor : 'var(--color-grey66)'};
        --label-size: ${ labelSize ? labelSize : 'var(--size14)'};
        grid-row-start: 1;
        align-self: center;
        color: hls( var(--label-color) );
        font-size: var(--label-size);
        line-height: 1.5;
        transition: color .25s linear;
    }
    :host(i-body) input {
        --input-color: ${inputColor ? inputColor : 'var(--color-black)'};
        --input-size: ${size ? size : 'var(--size14)'};
        --input-border-width: ${inputBorderWidth ? inputBorderWidth : '1px'};
        --input-border-style: ${inputBorderStyle ? inputBorderStyle : 'solid'};
        --input-border-color: ${inputBorderColor ? inputBorderColor : 'var(--color-greyCB)'};
        --input-border: var(--input-border-width) var(--input-border-style) hsl( var(--input-border-color) );
        --input-radius: var(--primary-input-radius);
        --input-bgColor: ${inputBgColor ? inputBgColor : 'var(--color-white)'};
        --input-padding: ${inputPadding ? inputPadding : '6px'};
        grid-column-start: 2;
        color: hsl( var(--input-color) );
        font-size: var(--input-size);
        line-height: inherit;
        border: var(--input-border);
        border-radius: var(--input-radius);
        padding: var(--input-padding);
        background-color: hsl( var(--input-bgColor) );
        transition: border .6s, background-color .6s, box-sahdow .6s linear;
    }
    :host(i-body) .col3.address {
        grid-row-start: 2;
        grid-column-end: 3;
        grid-template-columns: auto;
    }
    :host(i-body) .address {
        word-break: break-all;
    }
    :host(i-body) .limit {
        --limit-size: ${limitSize ? limitSize : 'var(--size12)'};
        --limit-color: ${limitColor ? limitColor : 'var(--color-grey88)'};
        align-self: center;
        font-size: var(--limit-size);
        color: hsl( var(--limit-color) );
    }
    :host(i-body) input[name="address"]:disabled {
        color: hsl( var(--color-black) );
        border: none;
        background-color: transparent;
    }
    :host(i-body) input:focus {
        --input-focus: ${inputFocusColor ? inputFocusColor : 'var(--color-black)'};
        --shaodw-n-offset: 0;
        --shaodw-v-offset: 0;
        --shadow-blur: ${shadowBlur ? shadowBlur : '8px'};
        --shadow-color: ${shadowColor ? shadowColor : 'hsla(0, 0%, 0%, .5)'};
        --shadow: var(--shaodw-n-offset) var(--shaodw-v-offset) var(--shadow-blur) hsl( var(--shadow-color) );
        -webkit-appearance: none; 
        appearance: none;
        border-color: hsl( var(--input-focus) );
        box-shadow: var(--shadow); 
        outline: none;
    }
    :host(i-body) .col2 {
        --col-border-width: ${inputBorderWidth ? inputBorderWidth : '1px'};
        --col-border-style: ${inputBorderStyle ? inputBorderStyle : 'solid'};
        --col-border-color: ${inputBorderColor ? inputBorderColor : 'var(--color-greyCB)'};
        --col-border: var(--col-border-width) var(--col-border-style) hsl( var(--col-border-color) );
        --col-radius: var(--primary-input-radius);
        --col-bgColor: ${inputBgColor ? inputBgColor : 'var(--color-white)'};
        --opacity: 1;
        display: grid;
        grid-template-rows: auto;
        grid-template-columns: 24px auto;
        border: var(--col-border);
        border-radius: var(--col-radius);
        background-color: hsla( var(--col-bgColor), var(--opacity) );
        align-items: center;
        padding: 0 10px;
        transition: border 0.6s, background-color 0.6s ease-in-out;
    }
    :host(i-body) .col2 .avatar {
        grid-row-start: 1;
        grid-column-start: 1;
    }
    :host(i-body) .col2 input {
        border: none;
        box-shadow: none;
        grid-row-start: 1;
        grid-column-start: 2;
    }
    :host(i-body) .col3 {
        --col-border-width: ${inputBorderWidth ? inputBorderWidth : '1px'};
        --col-border-style: ${inputBorderStyle ? inputBorderStyle : 'solid'};
        --col-border-color: ${inputBorderColor ? inputBorderColor : 'var(--color-greyCB)'};
        --col-border: var(--col-border-width) var(--col-border-style) hsl( var(--col-border-color) );
        --col-radius: var(--primary-input-radius);
        --col-bgColor: ${inputBgColor ? inputBgColor : 'var(--color-white)'};
        display: grid;
        grid-template-rows: 1fr;
        grid-template-columns: repeat(2, 1fr) 50px;
        border: var(--col-border);
        border-radius: var(--col-radius);
        background-color: hsl( var(--col-bgColor) );
        align-items: center;
        transition: border 0.6s, background-color 0.6s ease-in-out;
    }
    :host(i-body) .col2:focus-within, :host(i-body) .col3:focus-within {
        --focus-color: ${inputFocusColor ? inputFocusColor : 'var(--color-black)'};
        --shaodw-n-offset: 0;
        --shaodw-v-offset: 0;
        --shadow-blur: ${shadowBlur ? shadowBlur : '8px'};
        --shadow-color: ${shadowColor ? shadowColor : '0, 0%, 50%'};
        --shadow: var(--shaodw-n-offset) var(--shaodw-v-offset) var(--shadow-blur) hsl( var(--shadow-color) );
        border-color: hsl( var(--focus-color) );
        box-shadow: var(--shadow);
    }
    :host(i-body) .col3 input {
        --input-radius: var(--primary-input-radius);
        border: none;
        grid-column-start: span 2;
        border-radius: var(--input-radius);
        background-color: transparent;
        box-shadow: none;
    }
    :host(i-body) .col2 button, :host(i-body) .col3 button {
        background-color: transparent;
        border: none;
        grid-column-start: 3;
        grid-column-end: 4;
        padding: 0;
    }
    :host(i-body) button .down {
        transform: rotate(-90deg);
    }
    :host(i-body) div[data-step="create-account"] > .row {
        gap: 10px;
        grid-template-rows: auto;
        grid-template-columns: 120px auto minmax(auto, 80px);
    }
    :host(i-body) select {
        --select-size: ${ size ? size : 'var(--size14)'};
        --select-border-width: ${inputBorderWidth ? inputBorderWidth : '1px'};
        --select-border-style: ${inputBorderStyle ? inputBorderStyle : 'solid'};
        --select-border-color: ${inputBorderColor ? inputBorderColor : 'var(--color-greyCB)'};
        --select-border: var(--select-border-width) var(--select-border-style) hsl( var(--select-border-color) );
        --select-radius: var(--primary-input-radius);
        --select-bgColor: ${inputBgColor ? inputBgColor : 'var(--color-white)'};
        --select-padding: ${inputPadding ? inputPadding : '6px'};
        width: 100%;
        font-size: var(--select-size);
        border: var(--select-border);
        border-radius: var(--select-radius);
        padding: var(--select-padding);
        -webkit-appearance: none; 
        appearance: none;
        background-color: hsl( var(--select-bgColor) );
        transition: border .6s, background-color .6s, box-sahdow .6s linear;
    }
    :host(i-body) select:focus {
        --focus-color: ${inputFocusColor ? inputFocusColor : 'var(--color-black)'};
        --shaodw-n-offset: 0;
        --shaodw-v-offset: 0;
        --shadow-blur: ${shadowBlur ? shadowBlur : '8px'};
        --shadow-color: ${shadowColor ? shadowColor : 'hsla(0, 0%, 0%, .5)'};
        --shadow: var(--shaodw-n-offset) var(--shaodw-v-offset) var(--shadow-blur) var(--shadow-color);
        border-color: var(--focus-color);
        box-shadow: var(--shadow);
        outline: none;
    }
    :host(i-body[data-ui="default"]) {
        --modal-body-color: ${color ? color : 'var(--primary-color)'};
    }
    :host(i-body[data-ui="default"]) .row {
        justify-content: center;
        line-height: 22px;
    }
    :host(i-body[data-ui="step-modal"]) {
        --modal-body-border-width: ${borderWidth ? borderWidth : '1px'};
        --modal-body-border-style: ${borderStyle ? borderStyle : 'solid'};
        --modal-body-border-color: ${borderColor ? borderColor : 'var(--color-greyCB)'};
        --modal-body-border: var(--modal-body-border-width) var(--modal-body-border-style) hsl( var(--modal-body-border-color) );
        --modal-body-padding: 30px 10px 30px 30px;
        border: var(--modal-body-border);
        padding: var(--modal-body-padding);
    }
    :host(i-body[data-ui="action-modal"]) {}
    :host(i-body[data-ui="help-modal"]) {
        --modal-body-size: ${size ? size : 'var(--size14)'};
        --modal-body-color: ${color ? color : 'var(--color-grey33)'};
    }
    :host(i-body[data-ui="help-modal"]) footer {
        display: grid;
        grid-template-rows: auto;
        grid-template-columns: minmax(min-content, auto) auto minmax(auto, 100px);
    }
    :host(i-body[data-ui="help-modal"]) footer > button {
        grid-column-start: 3;
        background-color: transparent;
        border: none;
    }
    :host(i-body[data-ui="help-modal"]) footer > button .icon {
        width: 16px;
        grid-column-start: 2;
        display: grid;
        align-items: center;
        margin-left: 10px;
    }
    :host(i-body) .actions {
        display: grid;
        grid-template-rows: auto;
        grid-template-columns: repeat(2, 1fr);
        gap: 18px;
    }
    :host(i-body[data-ui="action-modal"]) .actions {
        grid-column-start: 2;
        gap: 50px;
    }
    :host(i-body) .info {
        --info-size: ${size ? size : 'var(--size14)'};
        display: grid;
        grid-template-rows: auto;
        grid-template-columns: 32px auto;
        align-items: center;
        font-size: var(--info-size);
        padding-left: 10px;
    }
    :host(i-body) .avatar  {
        --avatar-size: ${avatarSize ? avatarSize : '24px'};
        width: var(--avatar-size);
        height: var(--avatar-size);
    }
    :host(i-body) div[data-action="transfer"] .row {
        grid-template-rows: auto;
        grid-template-columns: 34px 1fr;
        gap: 8px;
    }
    :host(i-body) .fee {
        display: grid;
        align-items: center;
    }

    @media (max-width: 640px) {
        :host(i-body) .form-field {
            gap: 10px;
        }
        :host(i-body) div[data-step="create-account"] > .row {
            grid-template-rows: 1fr;
            grid-template-columns: 1fr;
        }
        :host(i-body) div[data-step="create-account"] .limit {
            grid-row-start: 3;
            justify-self: right;
        }
        :host(i-body) label {
            grid-row-start: 1;
        }
        :host(i-body) input {
            grid-row-start: 2;
            grid-column-start: 1;
        }
        :host(i-body) select {
            grid-row-start: 2;
            grid-column-start: span 2;
        }
        :host(i-body) .col3 {
            grid-row-start: 2;
        }
        :host(i-body) .col3.address {
            grid-row-start: 3;
            grid-column-start: span 2;
        }
        :host(i-body) .col3 input {
            grid-row-start: 1;
        }
        :host(i-body) div[data-action="transfer"] .row > input {
            grid-row-start: 1;
            grid-column-start: 2;
        }
    }
    ${customStyle}
    `
    return layout(style)
}