const styleSheet = require('../../src/node_modules/supportCSSStyleSheet')
const bel = require('bel')
const file = require('path').basename(__filename)
const icon = require('../../src/node_modules/icon')

module.exports = actions

function actions (protocol) {
    const sender = protocol (get)
    const e = document.createElement('i-actions')
    const root = e.attachShadow({mode: 'closed'})
    const debugIcon = new icon({name: 'debug'})
    const showAllButton = bel`<button role="button" aria-current="true" aria-label="Show all" class="btn" data-active="true" data-item="all">Show all modals</button>`
    const planPlayButton = bel`<button role="button" aria-label="Plan play" class="btn" data-active="false" data-item="default modal">Plan play</button>`
    const createButton = bel`<button role="button" aria-label="Create new account" class="btn" data-active="false" data-item="step modal">Create new account</button>`
    const transferButton = bel`<button role="button" aria-label="Transfer" class="btn" data-active="false" data-item="action modal">Transfer</button>`
    const helpButton = bel`<button role="button" aria-label="Help" class="btn" data-active="false" data-item="help modal">Help</button>`
    const actionBar = bel`<div class="actions" onclick="${(e) => handleTabs(e, actionBar)}">${showAllButton}${planPlayButton}${createButton}${transferButton}${helpButton}</div>`
    const deubgButton = bel`<button role="button" aria-label="Debug mode" class="btn debug" data-debug="true" onclick=${()=> debugModeOpen(deubgButton)}>${debugIcon}</button>`
    // style loades first
    styleSheet(root, style)
    // shadow loades second
    root.append(actionBar, deubgButton)
    return e

    function debugModeOpen (b) {
        b.dataset.debug =  b.dataset.debug === 'false' ? 'true' : 'false'
        sender({from: 'debug', flow: 'actions', type: 'click', state: b.dataset.debug, fn: 'debugModeOpen', file, line: 28})
    }

    function handleTabs (e, target) {
        const current = e.target.textContent
        const buttons = [...target.children]
        buttons.map( b => {
            if (b.dataset.active === true) return
            b.dataset.active = false
            b.removeAttribute('aria-current')
            if (current === b.textContent) {
                b.dataset.active = true
                b.setAttribute('aria-current', true)
                sender({from: `${current} button`, flow: 'actions', type: 'click', fn: 'handleTabs', body: b.dataset.item.split(' ')[0], file, line: 41})
            } 
       })
    }

    function get (msg) {
        console.log( msg )
    }
}

const style = `
:host(i-actions) .actions {
    display: grid;
    grid-template-rows: 44px;
    grid-auto-flow: column;
    gap: 8px;
}
:host(i-actions) button {
    --button-size: var(--size14);
    --button-color: var(--primary-color);
    --button-bgColor: var(--color-greyEF);
    --button-padding: 6px 12px;
    font-size: var(--button-size);
    color: hsl( var(--button-color) );
    background-color: hsl( var(--button-bgColor) );
    padding: var(--button-padding);
    border: none;
    border-radius: 4px;
    transition: color .25s, background-color .25s linear;
    cursor: pointer;
}
:host(i-actions) button[data-active="true"] {
    --button-color: var(--color-white);
    --button-bgColor: var(--color-black);
    cursor: default;
}
:host(i-actions) .debug {
    --button-bgColor: var(--color-black);
    --button-padding: 4px;
    position: fixed;
    right: 0;
    top: 0;
    z-index: 999;
    border-radius: 0;
}
:host(i-actions) .debug .icon {
    width: 24px;
    height: 24px;
}
:host(i-actions) .debug svg {
    width: 100%;
    height: auto;
}
:host(i-actions) .debug svg g {
    --svg-fill: var(--color-grey88);
    fill: hsl( var(--svg-fill) );
}
:host(i-actions) .debug[data-debug="true"] {
    --button-bgColor: var(--color-red);
}
:host(i-actions) .debug[data-debug="true"] svg g {
    --svg-fill: var(--color-black);
}
`